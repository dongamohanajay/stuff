CREATE EKS CLUSTER
CREATE UBUNTU INSTANCE 
CREATE RDS  WITH MYSQL	
CREATE ECR PRIVATE REPOSITORY

Took ubuntu instance install aws cli
   apt update -y
   apt upgrade -y
   apt install awscli
   aws configure

Install kubectl
   curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
   openssl sha1 -sha256 kubectl
   chmod +x ./kubectl
   mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
   echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
   kubectl version --short --client

Connect to the eks cluster    
   aws eks --region ap-south-1 update-kubeconfig --name eks

Install alb addon
(for iodc https link >>  aws eks describe-cluster --name my-cluster --query "cluster.identity.oidc.issuer" --output text
Go to console IAM>>identity providers>> select oidc >> select paste link>> thumprint>> For Audience, enter sts.amazonaws.com >> create provider)

  curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.2/docs/install/iam_policy.json
  aws iam create-policy     --policy-name AWSLoadBalancerControllerIAMPolicy     --policy-document file://iam_policy.json
  aws eks describe-cluster --name eks --query "cluster.identity.oidc.issuer" --output text
  nano load-balancer-role-trust-policy.json
(edit and copy paste in nano)

({
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Federated": "arn:aws:iam::111122223333:oidc-provider/oidc.eks.region-code.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE"
            },
            "Action": "sts:AssumeRoleWithWebIdentity",
            "Condition": {
                "StringEquals": {
                    "oidc.eks.region-code.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE:aud": "sts.amazonaws.com",
                    "oidc.eks.region-code.amazonaws.com/id/EXAMPLED539D4633E53DE1B71EXAMPLE:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller"
                }
            }
        }
    ]
})

  aws iam create-role   --role-name AmazonEKSLoadBalancerControllerRole   --assume-role-policy-document file://"load-balancer-role-trust-policy.json"
  aws iam attach-role-policy   --policy-arn arn:aws:iam::856998376771:policy/AWSLoadBalancerControllerIAMPolicy   --role-name AmazonEKSLoadBalancerControllerRole
  nano aws-load-balancer-controller-service-account.yaml
(edit and copy paste in nano)

(apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: aws-load-balancer-controller
  name: aws-load-balancer-controller
  namespace: kube-system
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::111122223333:role/AmazonEKSLoadBalancerControllerRole)

  kubectl apply -f aws-load-balancer-controller-service-account.yaml
  kubectl apply     --validate=false     -f https://github.com/jetstack/cert-manager/releases/download/v1.5.4/cert-manager.yaml
  curl -Lo v2_4_2_full.yaml https://github.com/kubernetes-sigs/aws-load-balancer-controller/releases/download/v2.4.2/v2_4_2_full.yaml
  sed -i.bak -e 's|your-cluster-name|eks|' ./v2_4_2_full.yaml
  nano v2_4_2_full.yaml

(remove serviceaccount kind
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/name: aws-load-balancer-controller
  name: aws-load-balancer-controller
  namespace: kube-system
---)

  kubectl apply -f v2_4_2_full.yaml
  kubectl get deployment -n kube-system aws-load-balancer-controller
  kubectl apply -f v2_4_2_full.yaml

Install docker
     sudo apt install docker
     sudo systemctl status docker
     sudo apt install apt-transport-https ca-certificates curl software-properties-common
     curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
     sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
     apt-cache policy docker-ce
     sudo apt install docker-ce
     sudo systemctl status docker
     docker search wordpress
     docker pull wordpress
     docker images
     docker container ps
     docker container ps -a
     docker run -d -p 80:80 wordpress
     docker container ps
     mkdir ~/Workspace/Docker/Wordpress
     mkdir /Workspace/Docker/Wordpress
     mkdir wordpress
     touch wordpress/Dockerfile
     nano wordpress/Dockerfile

(edit and paste 
ENV WORDPRESS_DB_HOST=eks-database.coqpjzxx0zy7.ap-south-1.rds.amazonaws.com \
    WORDPRESS_DB_USER=admin \
    WORDPRESS_DB_PASSWORD=Z9SqHET7FFTqYRrIF5s5 \
    WORDPRESS_DB_NAME=eks-database \
    WORDPRESS_TABLE_PREFIX=wp_
)
    docker images
   
Install mysql
    apt install mysql
    apt get install mysql-client
    apt install mysql-server

Connect to the rds endpoint
    mysql -h wordpress.czznvgywh3sy.ap-south-1.rds.amazonaws.com -u admin -p

Create database in mysql
    create databasename;
    show databases;

Build docker image
    docker build -t wordpress .

Go to ecr enter repositories select repository and enter on view push commands
    aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 856998376771.dkr.ecr.ap-south-1.amazonaws.com
    docker tag eks:latest 856998376771.dkr.ecr.ap-south-1.amazonaws.com/eks:latest
    docker push 856998376771.dkr.ecr.ap-south-1.amazonaws.com/sairam:latest

Git clone the wp config with rds by below command
     git clone  https://github.com/sairam48/eksrdsdocker.git
     nano wp-rds.yml
   (edit the wp-rds file change image url with the ecr repository url)
    
     kubectl apply -f wp-rds.yml
     kubectl get pods



 


