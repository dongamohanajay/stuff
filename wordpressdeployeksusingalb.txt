-----------------------------------------------------------
root@ip-192-168-13-167:~/wordpress# history
    1  apt update -y
    2  apt upgrade -y
    3  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    4  unzip awscliv2.zip
    5  apt install unzip
    6  unzip awscliv2.zip
    7  sudo ./aws/install
    8  curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
    9  openssl sha1 -sha256 kubectl
   10  chmod +x ./kubectl
   11  mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
   12  echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
   13  kubectl version --short --client
   14  curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
   15  sudo mv /tmp/eksctl /usr/local/bin
   16  eksctl version
   17  curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
   18  chmod 700 get_helm.sh
   19  ./get_helm.sh
   20  aws configure
   21  aws iam list-users
   22  kubectl get svc
   23  aws eks --region us-east-2 update-kubeconfig --name wp-cluster
   24  kubectl get svc
   25  kubectl get nodes
   26  kubectl get ns
   27  kubectl get nodes
   28  helm repo add eks https://aws.github.io/eks-charts
   29  helm install aws-load-balancer-controller eks/aws-load-balancer-controller --set clusterName=wp-cluster -n kube-system --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller
   30  kubectl get deployment -n kube-system aws-load-balancer-controller
   31  eksctl utils associate-iam-oidc-provider     --region us-east-2     --cluster wp-cluster     --approve
   32  curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
   33  aws iam create-policy     --policy-name AWSLoadBalancerControllerIAMPolicy     --policy-document file://iam-policy.json
   34  curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
   35  eksctl create iamserviceaccount --cluster=wp-cluster --namespace=kube-system --name=aws-load-balancer-controller --attach-policy-arn=arn:aws:iam::953129327946:policy/AWSLoadBalancerControllerIAMPolicy --approve
   36  helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=wp-cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller
   37  kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
   38  kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.2/cert-manager.crds.yaml
   39  helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
   40  helm repo update
   41  helm repo add eks https://aws.github.io/eks-charts
   42  kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
   43  helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=wp-cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller
   44  kubectl delete deployment -n kube-system alb-ingress-controller
   45  kubectl delete clusterRole alb-ingress-controller
   46  kubectl delete ClusterRoleBinding alb-ingress-controller
   47  kubectl describe deployment  -n kube-system  alb-ingress-controller |grep Image
   48  kubectl get deployment -n kube-system aws-load-balancer-controller
   49  ls
   50  cd wordpress
   51  mkdir wordpress
   52  ls
   53  cd wordpress
   54  nano wordpress.yaml
   55  ls
   56  cat wordpress.yaml
   57  nano mysql.yaml
   58  ls
   59  kubectl apply -f mysql.yaml
   60  cat mysql.yaml
   61  ls
   62  nano mysql-deployment.yaml
   63  kubectl get ns
   64  kubectl delete deployment mysql.yaml
   65  kubectl apply -f mysql-deployment.yaml
   66  kubectl apply -f mysql.yaml
   67  ls
   68  rm mysql-deployment.yaml
   69  ls
   70  kubectl get pods
   71  kubectl delete deploy mysql.yaml
   72  lks
   73  ls
   74  nano mysql.yaml
   75  kubectl apply -f mysql.yaml
   76  kubectl apply -f wordpress.yaml
   77  kubectl get pods
   78  kubectl get services
   79  kubectl get pods --all-namespaces
   80  ls
   81  vi wordpress.yaml
   82  history
-----------------------------------------------------------
root@ip-192-168-13-167:~# sudo ./aws/install
You can now run: /usr/local/bin/aws --version
root@ip-192-168-13-167:~# curl -o kubectl https://s3.us-west-2.amazonaws.com/ama                                                                             zon-eks/1.22.6/2022-03-09/bin/linux/amd64/kubectl
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 44.7M  100 44.7M    0     0  5542k      0  0:00:08  0:00:08 --:--:-- 6116k
root@ip-192-168-13-167:~# openssl sha1 -sha256 kubectl
SHA256(kubectl)= 860c3d37a5979491895767e7332404d28dc0d7797c7673c33df30ca80e215a0                                                                             7
root@ip-192-168-13-167:~# chmod +x ./kubectl
root@ip-192-168-13-167:~# mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl &                                                                             & export PATH=$PATH:$HOME/bin
root@ip-192-168-13-167:~# echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
root@ip-192-168-13-167:~# kubectl version --short --client
Client Version: v1.22.6-eks-7d68063
root@ip-192-168-13-167:~# curl --silent --location "https://github.com/weavework                                                                             s/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /                                                                             tmp
root@ip-192-168-13-167:~# sudo mv /tmp/eksctl /usr/local/bin
root@ip-192-168-13-167:~# eksctl version
0.104.0
root@ip-192-168-13-167:~# curl -fsSL -o get_helm.sh https://raw.githubuserconten                                                                             t.com/helm/helm/main/scripts/get-helm-3
root@ip-192-168-13-167:~# chmod 700 get_helm.sh
root@ip-192-168-13-167:~# ./get_helm.sh
Downloading https://get.helm.sh/helm-v3.9.0-linux-amd64.tar.gz
Verifying checksum... Done.
Preparing to install helm into /usr/local/bin
helm installed into /usr/local/bin/helm
root@ip-192-168-13-167:~# aws configure
AWS Access Key ID [None]: AKIA532XPLVFGTFURKXE
AWS Secret Access Key [None]: 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
Default region name [None]: us-east-2
Default output format [None]:
root@ip-192-168-13-167:~# aws iam list-users
{
    "Users": [
        {
            "Path": "/",
            "UserName": "ajay",
            "UserId": "AIDA532XPLVFE5WLUHYHZ",
            "Arn": "arn:aws:iam::953129327946:user/ajay",
            "CreateDate": "2022-06-07T05:07:44+00:00",
            "PasswordLastUsed": "2022-07-06T05:23:52+00:00"
        },
        {
            "Path": "/",
            "UserName": "workshop",
            "UserId": "AIDA532XPLVFLQS44YDEH",
            "Arn": "arn:aws:iam::953129327946:user/workshop",
            "CreateDate": "2022-06-30T08:15:56+00:00",
            "PasswordLastUsed": "2022-06-30T10:36:32+00:00"
        }
    ]
}
root@ip-192-168-13-167:~# kubectl get svc
The connection to the server localhost:8080 was refused - did you specify the ri                                                                             ght host or port?
root@ip-192-168-13-167:~# aws eks --region us-east-2 update-kubeconfig --name wp                                                                             -cluster
Added new context arn:aws:eks:us-east-2:953129327946:cluster/wp-cluster to /root                                                                             /.kube/config
root@ip-192-168-13-167:~# kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.100.0.1   <none>        443/TCP   11m
root@ip-192-168-13-167:~# kubectl get nodes
NAME                                            STATUS     ROLES    AGE   VERSIO                                                                             N
ip-192-168-146-45.us-east-2.compute.internal    NotReady   <none>   20s   v1.22.                                                                             9-eks-810597c
ip-192-168-250-181.us-east-2.compute.internal   NotReady   <none>   17s   v1.22.                                                                             9-eks-810597c
root@ip-192-168-13-167:~# kubectl get ns
NAME              STATUS   AGE
default           Active   11m
kube-node-lease   Active   11m
kube-public       Active   11m
kube-system       Active   11m
root@ip-192-168-13-167:~# kubectl get nodes
NAME                                            STATUS   ROLES    AGE   VERSION
ip-192-168-146-45.us-east-2.compute.internal    Ready    <none>   40s   v1.22.9-                                                                             eks-810597c
ip-192-168-250-181.us-east-2.compute.internal   Ready    <none>   37s   v1.22.9-                                                                             eks-810597c
root@ip-192-168-13-167:~# helm repo add eks https://aws.github.io/eks-charts
"eks" has been added to your repositories
root@ip-192-168-13-167:~# helm install aws-load-balancer-controller eks/aws-load-balancer-controller --set clusterName=wp-cluster -n kube-system --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller
NAME: aws-load-balancer-controller
LAST DEPLOYED: Wed Jul  6 06:05:46 2022
NAMESPACE: kube-system
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
AWS Load Balancer controller installed!
root@ip-192-168-13-167:~# kubectl get deployment -n kube-system aws-load-balancer-controller
NAME                           READY   UP-TO-DATE   AVAILABLE   AGE
aws-load-balancer-controller   0/2     0            0           39s
root@ip-192-168-13-167:~# eksctl utils associate-iam-oidc-provider \
>     --region us-east-2 \
>     --cluster wp-cluster \
>     --approve
2022-07-06 06:07:10 [ℹ]  will create IAM Open ID Connect provider for cluster "wp-cluster" in "us-east-2"
2022-07-06 06:07:10 [✔]  created IAM Open ID Connect provider for cluster "wp-cluster" in "us-east-2"
root@ip-192-168-13-167:~# curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  7617  100  7617    0     0  71186      0 --:--:-- --:--:-- --:--:-- 71186
root@ip-192-168-13-167:~# aws iam create-policy \
>     --policy-name AWSLoadBalancerControllerIAMPolicy \
>     --policy-document file://iam-policy.json
{
    "Policy": {
        "PolicyName": "AWSLoadBalancerControllerIAMPolicy",
        "PolicyId": "ANPA532XPLVFPDVKOLVDC",
        "Arn": "arn:aws:iam::953129327946:policy/AWSLoadBalancerControllerIAMPolicy",
        "Path": "/",
        "DefaultVersionId": "v1",
        "AttachmentCount": 0,
        "PermissionsBoundaryUsageCount": 0,
        "IsAttachable": true,
        "CreateDate": "2022-07-06T06:07:51+00:00",
        "UpdateDate": "2022-07-06T06:07:51+00:00"
    }
}
root@ip-192-168-13-167:~# curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  7617  100  7617    0     0   143k      0 --:--:-- --:--:-- --:--:--  143k
root@ip-192-168-13-167:~# eksctl create iamserviceaccount \
> --cluster=wp-cluster \
> --namespace=kube-system \
> --name=aws-load-balancer-controller \
> --attach-policy-arn=arn:aws:iam::953129327946:policy/AWSLoadBalancerControllerIAMPolicy \
> --approve
2022-07-06 06:12:40 [ℹ]  1 iamserviceaccount (kube-system/aws-load-balancer-controller) was included (based on the include/exclude rules)
2022-07-06 06:12:40 [!]  serviceaccounts that exist in Kubernetes will be excluded, use --override-existing-serviceaccounts to override
2022-07-06 06:12:40 [ℹ]  1 task: {
    2 sequential sub-tasks: {
        create IAM role for serviceaccount "kube-system/aws-load-balancer-controller",
        create serviceaccount "kube-system/aws-load-balancer-controller",
    } }2022-07-06 06:12:40 [ℹ]  building iamserviceaccount stack "eksctl-wp-cluster-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2022-07-06 06:12:41 [ℹ]  deploying stack "eksctl-wp-cluster-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2022-07-06 06:12:41 [ℹ]  waiting for CloudFormation stack "eksctl-wp-cluster-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2022-07-06 06:13:11 [ℹ]  waiting for CloudFormation stack "eksctl-wp-cluster-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2022-07-06 06:13:11 [ℹ]  created serviceaccount "kube-system/aws-load-balancer-controller"
root@ip-192-168-13-167:~# helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=wp-cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller
Release "aws-load-balancer-controller" has been upgraded. Happy Helming!
NAME: aws-load-balancer-controller
LAST DEPLOYED: Wed Jul  6 06:13:22 2022
NAMESPACE: kube-system
STATUS: deployed
REVISION: 2
TEST SUITE: None
NOTES:
AWS Load Balancer controller installed!
root@ip-192-168-13-167:~# kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
Warning: resource customresourcedefinitions/ingressclassparams.elbv2.k8s.aws is missing the kubectl.kubernetes.io/last-applied-configuration annotation which is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.
customresourcedefinition.apiextensions.k8s.io/ingressclassparams.elbv2.k8s.aws configured
Warning: resource customresourcedefinitions/targetgroupbindings.elbv2.k8s.aws is missing the kubectl.kubernetes.io/last-applied-configuration annotation which is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.
customresourcedefinition.apiextensions.k8s.io/targetgroupbindings.elbv2.k8s.aws configured
root@ip-192-168-13-167:~# kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.2/cert-manager.crds.yaml
customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created
root@ip-192-168-13-167:~# helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
"prometheus-community" has been added to your repositories
root@ip-192-168-13-167:~# helm repo update
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "eks" chart repository
...Successfully got an update from the "prometheus-community" chart repository
Update Complete. ⎈Happy Helming!⎈
root@ip-192-168-13-167:~# helm repo add eks https://aws.github.io/eks-charts
"eks" already exists with the same configuration, skipping
root@ip-192-168-13-167:~# kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
customresourcedefinition.apiextensions.k8s.io/ingressclassparams.elbv2.k8s.aws configured
customresourcedefinition.apiextensions.k8s.io/targetgroupbindings.elbv2.k8s.aws configured
root@ip-192-168-13-167:~# helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=wp-cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller
Release "aws-load-balancer-controller" has been upgraded. Happy Helming!
NAME: aws-load-balancer-controller
LAST DEPLOYED: Wed Jul  6 06:16:08 2022
NAMESPACE: kube-system
STATUS: deployed
REVISION: 3
TEST SUITE: None
NOTES:
AWS Load Balancer controller installed!
root@ip-192-168-13-167:~# kubectl delete deployment -n kube-system alb-ingress-controller
Error from server (NotFound): deployments.apps "alb-ingress-controller" not found
root@ip-192-168-13-167:~# kubectl delete clusterRole alb-ingress-controller
Error from server (NotFound): clusterroles.rbac.authorization.k8s.io "alb-ingress-controller" not found
root@ip-192-168-13-167:~# kubectl delete ClusterRoleBinding alb-ingress-controller
Error from server (NotFound): clusterrolebindings.rbac.authorization.k8s.io "alb-ingress-controller" not found
root@ip-192-168-13-167:~# kubectl describe deployment  -n kube-system  alb-ingress-controller |grep Image
Error from server (NotFound): deployments.apps "alb-ingress-controller" not found
root@ip-192-168-13-167:~# kubectl get deployment -n kube-system aws-load-balancer-controller
NAME                           READY   UP-TO-DATE   AVAILABLE   AGE
aws-load-balancer-controller   2/2     2            2           14m
root@ip-192-168-13-167:~# ls
aws  awscliv2.zip  bin  get_helm.sh  iam-policy.json  kubectl  snap
root@ip-192-168-13-167:~# cd wordpress
-bash: cd: wordpress: No such file or directory
root@ip-192-168-13-167:~# mkdir wordpress
root@ip-192-168-13-167:~# ls
aws  awscliv2.zip  bin  get_helm.sh  iam-policy.json  kubectl  snap  wordpress
root@ip-192-168-13-167:~# cd wordpress
root@ip-192-168-13-167:~/wordpress# nano wordpress.yaml
root@ip-192-168-13-167:~/wordpress# ls
wordpress.yaml
root@ip-192-168-13-167:~/wordpress# cat wordpress.yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  ports:
    - port: 80
  selector:
    app: wordpress
    tier: frontend
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-wordpress
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: wordpress
              port:
                number: 80
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wp-pv-claim
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: frontend
    spec:
      containers:
      - image: wordpress:4.8-apache
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: wordpress-mysql
        - name: WORDPRESS_DB_PASSWORD
          value: mysql-pass
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-persistent-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-persistent-storage
        persistentVolumeClaim:
          claimName: wp-pv-claim
root@ip-192-168-13-167:~/wordpress# nano mysql.yaml
root@ip-192-168-13-167:~/wordpress# ls
mysql.yaml  wordpress.yaml
root@ip-192-168-13-167:~/wordpress# kubectl apply -f mysql.yaml
service/wordpress-mysql created
persistentvolumeclaim/mysql-pv-claim created
error: error parsing mysql.yaml: error converting YAML to JSON: yaml: line 26: could not find expected ':'
root@ip-192-168-13-167:~/wordpress# cat mysql.yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpress-mysql
  labels:
    app: wordpress
spec:
  ports:
    - port: 3306
  selector:
    app: wordpress
    tier: mysql
  clusterIP: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1 # for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: wordpress-mysql
  labels:
    app: wordpress
spec:
  selector:
    matchLabels:
      app: wordpress
      tier: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: wordpress
        tier: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          value:mysql-pass
        livenessProbe:
          tcpSocket:
            port: 3306
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
root@ip-192-168-13-167:~/wordpress# ls
mysql.yaml  wordpress.yaml
root@ip-192-168-13-167:~/wordpress# nano mysql-deployment.yaml
root@ip-192-168-13-167:~/wordpress# kubectl get ns
NAME              STATUS   AGE
default           Active   44m
kube-node-lease   Active   44m
kube-public       Active   44m
kube-system       Active   44m
root@ip-192-168-13-167:~/wordpress# kubectl delete deployment mysql.yaml
Error from server (NotFound): deployments.apps "mysql.yaml" not found
root@ip-192-168-13-167:~/wordpress# kubectl apply -f mysql-deployment.yaml
service/wordpress-mysql unchanged
deployment.apps/wordpress-mysql created
The PersistentVolumeClaim "mysql-pv-claim" is invalid: spec: Forbidden: spec is immutable after creation except resources.requests for bound claims
  core.PersistentVolumeClaimSpec{
-       AccessModes: []core.PersistentVolumeAccessMode{"ReadWriteMany"},
+       AccessModes: []core.PersistentVolumeAccessMode{"ReadWriteOnce"},
        Selector:    nil,
        Resources:   {Requests: {s"storage": {i: {...}, s: "20Gi", Format: "BinarySI"}}},
        ... // 5 identical fields
  }

root@ip-192-168-13-167:~/wordpress# kubectl apply -f mysql.yaml
service/wordpress-mysql unchanged
persistentvolumeclaim/mysql-pv-claim unchanged
error: error parsing mysql.yaml: error converting YAML to JSON: yaml: line 26: could not find expected ':'
root@ip-192-168-13-167:~/wordpress# ls
mysql-deployment.yaml  mysql.yaml  wordpress.yaml
root@ip-192-168-13-167:~/wordpress# rm mysql-deployment.yaml
root@ip-192-168-13-167:~/wordpress# ls
mysql.yaml  wordpress.yaml
root@ip-192-168-13-167:~/wordpress# kubectl get pods
NAME                              READY   STATUS                       RESTARTS   AGE
wordpress-mysql-6c479567b-xk7rz   0/1     CreateContainerConfigError   0          5m3s
root@ip-192-168-13-167:~/wordpress# kubectl delete deploy mysql.yaml
Error from server (NotFound): deployments.apps "mysql.yaml" not found
root@ip-192-168-13-167:~/wordpress# lks

Command 'lks' not found, did you mean:

  command 'ls' from deb coreutils (8.30-3ubuntu2)
  command 'lrs' from deb lrslib (0.70-3)
  command 'lksh' from deb mksh (58-1)
  command 'lvs' from deb lvm2 (2.03.07-1ubuntu1)
  command 'les' from deb atm-tools (1:2.5.1-4)
  command 'sks' from deb sks (1.1.6-14)

Try: apt install <deb name>

root@ip-192-168-13-167:~/wordpress# ls
mysql.yaml  wordpress.yaml
root@ip-192-168-13-167:~/wordpress# nano mysql.yaml
root@ip-192-168-13-167:~/wordpress# kubectl apply -f mysql.yaml
service/wordpress-mysql unchanged
persistentvolumeclaim/mysql-pv-claim unchanged
deployment.apps/wordpress-mysql configured
root@ip-192-168-13-167:~/wordpress# kubectl apply -f wordpress.yaml
service/wordpress created
ingress.networking.k8s.io/ingress-wordpress created
persistentvolumeclaim/wp-pv-claim created
deployment.apps/wordpress created
root@ip-192-168-13-167:~/wordpress# kubectl get pods
NAME                               READY   STATUS              RESTARTS   AGE
wordpress-5984887d74-8pvgv         0/1     ContainerCreating   0          16s
wordpress-mysql-78cf5fbf49-jmpb4   1/1     Running             0          56s
root@ip-192-168-13-167:~/wordpress# kubectl get pods
NAME                               READY   STATUS    RESTARTS   AGE
wordpress-5984887d74-8pvgv         1/1     Running   0          68s
wordpress-mysql-78cf5fbf49-jmpb4   1/1     Running   0          108s
root@ip-192-168-13-167:~/wordpress# kubectl get services
NAME              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE
kubernetes        ClusterIP   10.100.0.1      <none>        443/TCP        60m
wordpress         NodePort    10.100.32.114   <none>        80:32696/TCP   2m19s
wordpress-mysql   ClusterIP   None            <none>        3306/TCP       23m
root@ip-192-168-13-167:~/wordpress# kubectl get pods --all-namespaces
NAMESPACE     NAME                                            READY   STATUS    RESTARTS   AGE
default       wordpress-5984887d74-8pvgv                      1/1     Running   0          2m43s
default       wordpress-mysql-78cf5fbf49-jmpb4                1/1     Running   0          3m23s
kube-system   aws-load-balancer-controller-755bbd88cf-7tw2f   1/1     Running   0          32m
kube-system   aws-load-balancer-controller-755bbd88cf-bm7r7   1/1     Running   0          32m
kube-system   aws-node-ftr8t                                  1/1     Running   0          49m
kube-system   aws-node-wfctt                                  1/1     Running   0          49m
kube-system   coredns-5db97b446d-mpcv6                        1/1     Running   0          60m
kube-system   coredns-5db97b446d-q9bqk                        1/1     Running   0          60m
kube-system   kube-proxy-vtfbk                                1/1     Running   0          49m
kube-system   kube-proxy-x92s5                                1/1     Running   0          49m
root@ip-192-168-13-167:~/wordpress# ls
mysql.yaml  wordpress.yaml
root@ip-192-168-13-167:~/wordpress# vi wordpress.yaml
root@ip-192-168-13-167:~/wordpress#
